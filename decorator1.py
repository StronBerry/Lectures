# def decorator(func):
#     # Реализуем принцип Замыкания
#     def wrapper():
#         print("Делаем что-то перед вызовом функции -- изменяем её поведение")
#         func()
#         print("Делаем что-то после вызова функции -- изменяем её поведение")
#     return wrapper
#
# # Делаем "основную" функцию, поведение которой будем менять
# def demo_func():
#     print('Работает целевая функция')
#
# changed_function = decorator(demo_func)
#
# changed_function()
# # Делаем что-то перед вызовом функции -- изменяем её поведение
# # Работает целевая функция
# # Делаем что-то после вызова функции -- изменяем её поведение

def decorator(func):
    def wrapper(parameter):
        print("Делаем что-то перед вызовом функции -- изменяем её поведение")
        func(parameter)
        print("Делаем что-то после вызова функции -- изменяем её поведение")
    return wrapper

def demo_func(parameter):
    print('Работает целевая функция c параметром(-ами):')
    print(parameter)

changed_function = decorator(demo_func)

changed_function('Параметр декорированной функции')
# Делаем что-то перед вызовом функции -- изменяем её поведение
# Работает целевая функция c параметром(-ами):
# Параметр декорированной функции
# Делаем что-то после вызова функции -- изменяем её поведение