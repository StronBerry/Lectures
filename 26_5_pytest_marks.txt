### Краткий конспект: Фикстуры `pytest.mark`

#### **Зачем нужны фикстуры `pytest.mark`?**
Фикстуры позволяют:
1. **Группировать тесты** по разным категориям (API, UI, события и т.д.).
2. Ускорять процесс тестирования, фильтруя тесты для запуска (например, запускать только API тесты).
3. Управлять выполнением тестов (пропуск, ожидание падений).

---

#### **Основные фикстуры**

1. **`pytest.mark.skip`**
   - **Описание**: Пропускает тесты.
   - **Использование**:
     ```python
     @pytest.mark.skip(reason="Баг в продукте - <ссылка>")
     def test_one(): ...
     ```
   - **Результат в консоли**:
     ```
     SKIPPED: Баг в продукте - <ссылка>
     ```

2. **`pytest.mark.skipif`**
   - **Описание**: Пропускает тест при выполнении определённого условия.
   - **Пример**:
     ```python
     @pytest.mark.skipif(sys.version_info < (3, 6), reason="Требуется Python >= 3.6")
     def test_python36_and_greater(): ...
     ```

3. **`pytest.mark.xfail`**
   - **Описание**: Помечает тест как ожидаемо падающий.
   - **Пример**:
     ```python
     @pytest.mark.xfail
     def test_flaky(): ...
     ```
   - **Дополнительно**: Можно указывать условие и тип ожидаемой ошибки:
     ```python
     @pytest.mark.xfail(raises=RuntimeError)
     def test_x_status_runtime_only(): ...
     ```

---

#### **Пользовательские группы**

- Для группировки тестов используются собственные метки:
  ```python
  @pytest.mark.api
  @pytest.mark.auth
  def test_auth_api(): ...
  ```
- Необходим файл `pytest.ini` в корне проекта для описания групп:
  ```ini
  [pytest]
  markers =
     api: тесты API
     ui: тесты UI
     event: тесты мероприятий
     auth: тесты авторизации
  ```

---

#### **Фильтрация тестов**

1. **Запуск тестов одной категории:**
   ```bash
   pytest test.py -v -m "api"
   ```
   - Результат: Выполнятся только тесты с меткой `@pytest.mark.api`.

2. **Комбинации меток:**
   - Только `UI` тесты авторизации:
     ```bash
     pytest test.py -v -m "ui and auth"
     ```
   - Все тесты авторизации и мероприятий:
     ```bash
     pytest test.py -v -m "auth or event"
     ```

---

#### **Пример вывода**
Для команды:
```bash
pytest test.py -v -m "auth or event"
```
Результат:
```
tests/test.py::test_auth_api PASSED  [25%]
tests/test.py::test_auth_ui PASSED  [50%]
tests/test.py::test_event_api PASSED [75%]
tests/test.py::test_event_ui PASSED [100%]
========== 4 passed in 0.03s ==========
```

---

#### **Вывод**
- Фикстуры `pytest.mark` помогают эффективно управлять тестами.
- Использование групп позволяет гибко выбирать нужные тесты для разных этапов разработки.