# open(file, mode="a")
# аргумент file принимает строку, в которой указан путь к файлу;
# аргумент mode принимает режим, в котором необходимо открыть файл.
# По умолчанию аргумент mode принимает значение «rt» — чтение текстового файла.
# Также можно указать следующие значения для режима открытия файла:
# 'r' — открывает файл для чтения. Возвращает ошибку, если указанный файл не существует (задан по умолчанию).
# 'w' — открывает файл для записи, причем перезаписывает содержимое, если оно есть. Создает файл, если он не существует.
# 'a' — открывает файл для записи и добавляет новую информацию, не перезаписывая существующую. Создает файл, если он не существует.
# 't' — открывает как текстовый файл (задан по умолчанию).
# 'b' — открывает как двоичный файл.
# '+' — работа с файлом и в режиме чтения, и в режиме записи.
# Эти параметры можно комбинировать. Например, режим «rb» откроет двоичный файл для чтения.

# Файлы в Python делятся на два типа:
# 't' — текстовые, в которых записаны человекочитаемые символы.
# Такие файлы можно прочитать и редактировать через блокнот и другие стандартные текстовые редакторы.
# 'b' — бинарные (двоичные), в которых данные отображаются в закодированной форме
# с использованием нулей (0) и единиц (1) вместо простых символов.
# Если не указывать тип файла, по умолчанию Python работает с текстовыми файлами.
# Для работы с изображениями, мультимедийными файлами и документами формата .pdf нужно указывать,
# что тип файла относится к бинарным — 'b'.

# Открыть файл для работы можно двумя способами:

# Используя функции open(). После завершения работы с файлом нужно закрыть его с помощью close():
# f = open('file.txt', 'a')

# f.close()
# С помощью менеджера контекста with,
# который автоматически и самостоятельно закроет файл, после завершения работы с ним:
# with open('file.txt', 'a') as f:

# с помощью функции read()можно прочитать файл целиком, а все данные записать в одну строку:
#
# with open('file.txt', 'r') as f:
#     text = f.read()
# В этом случае в переменной text будет записано содержимое файла целиком.

# прочитать определенное количество символов из файла, используя функцию read(), и в аргумент передать целое число:

# with open('file.txt', 'r') as f:
#     text = f.read(16)
# В этом случае в переменной text будут записаны первые 16 символов текста,
# а курсор будет стоять на 17-м символе.
# Тогда при применении этой функции еще раз, считается следующая часть текста.

# Также курсор можно сдвинуть на определенную позицию методом seek():
#
# with open('file.txt', 'r') as f: # 'Hello, world!'
#     first_part = f.read(8)       # 'Hello, w'
#     f.seek(4)
#     second_part = f.read(8)      # 'o, world'

# С помощью метода readline() считывается строка и курсор сдвигается на следующую строку.
# Таким образом можно считывать строки по порядку.
#
# with open('file.txt', 'r') as f:
#     first_line = f.readline()    # первая строка
#     second_line = f.readline()   # вторая строка

# прочитать файл целиком, каждую строку записать в список.
# Этот список можно использовать как итерируемый объект в цикле:
#
# with open('file.txt', 'r') as f:
#     for line in f.readlines():
#         print(line)
# Или можно считывать файл построчно с помощью цикла:
#
# with open('file.txt', 'r') as f:
#     for line in f:
#         print(line)

